var cov_2oeuc1hz4u=function(){var path="C:\\Users\\Admin\\Desktop\\JSTestCourse\\src\\test\\index.spec.js";var hash="84e4b0459764ebd933d24a398d5ec31248344c96";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Admin\\Desktop\\JSTestCourse\\src\\test\\index.spec.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:2,column:16},end:{line:2,column:35}},"2":{start:{line:4,column:0},end:{line:16,column:2}},"3":{start:{line:5,column:4},end:{line:9,column:6}},"4":{start:{line:6,column:23},end:{line:6,column:31}},"5":{start:{line:7,column:28},end:{line:7,column:30}},"6":{start:{line:8,column:8},end:{line:8,column:41}},"7":{start:{line:11,column:4},end:{line:15,column:6}},"8":{start:{line:12,column:8},end:{line:14,column:10}},"9":{start:{line:13,column:12},end:{line:13,column:17}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:35},end:{line:4,column:36}},loc:{start:{line:4,column:45},end:{line:16,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:5,column:49},end:{line:5,column:50}},loc:{start:{line:5,column:61},end:{line:9,column:5}},line:5},"2":{name:"(anonymous_2)",decl:{start:{line:11,column:63},end:{line:11,column:64}},loc:{start:{line:11,column:73},end:{line:15,column:5}},line:11},"3":{name:"(anonymous_3)",decl:{start:{line:12,column:22},end:{line:12,column:23}},loc:{start:{line:12,column:28},end:{line:14,column:9}},line:12}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"84e4b0459764ebd933d24a398d5ec31248344c96"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const assert=(cov_2oeuc1hz4u.s[0]++,require('assert'));const{add}=(cov_2oeuc1hz4u.s[1]++,require('../index'));cov_2oeuc1hz4u.s[2]++;describe('The ADD function tests',function(){cov_2oeuc1hz4u.f[0]++;cov_2oeuc1hz4u.s[3]++;it('Should return 11 for arguments 5 and 6',function(){cov_2oeuc1hz4u.f[1]++;const actual=(cov_2oeuc1hz4u.s[4]++,add(5,6));const expectation=(cov_2oeuc1hz4u.s[5]++,11);cov_2oeuc1hz4u.s[6]++;assert.equal(actual,expectation);});cov_2oeuc1hz4u.s[7]++;it('Should throw an error if arguments are not passed in',function(){cov_2oeuc1hz4u.f[2]++;cov_2oeuc1hz4u.s[8]++;assert.throws(()=>{cov_2oeuc1hz4u.f[3]++;cov_2oeuc1hz4u.s[9]++;add();});});});